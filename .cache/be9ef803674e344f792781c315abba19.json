{"dependencies":[{"name":"typecast","loc":{"line":1,"column":23}},{"name":"type","loc":{"line":5,"column":19}},{"name":"component-type","loc":{"line":7,"column":19}}],"generated":{"js":"var typecast = require('typecast');\nvar typeOf;\n\ntry {\n  typeOf = require('type');\n} catch (err) {\n  typeOf = require('component-type');\n}\n\n/**\n * Expose Property\n */\n\nmodule.exports = Property;\n\n/**\n * Property constructor\n *\n * @param {String} name\n * @param {Object} [opts]\n * @api public\n */\n\nfunction Property (name, schema) {\n  this.fns = [];\n  this.name = name;\n  this.schema = schema;\n  this._type = undefined;\n  this.msg = 'validation failed for path ' + name;\n}\n\nProperty.prototype = {\n\n  /**\n   * Validate with given `fn` and optional `msg`\n   *\n   * @param {Function} fn\n   * @param {String} [msg]\n   * @return {Property}\n   * @api public\n   */\n\n  use: function (fn, msg) {\n    this.fns.push([fn, msg]);\n    return this;\n  },\n\n  /**\n   * Is required\n   *\n   * @param {Boolean} [bool]\n   * @param {String} [msg]\n   * @return {Property}\n   * @api public\n   */\n\n  required: function (bool, msg) {\n    if ('string' == typeof bool) msg = bool;\n    return this.use(required(bool), msg);\n  },\n\n  /**\n   * Is of type `name`\n   *\n   * @param {String} name\n   * @param {String} [msg]\n   * @return {Property}\n   * @api public\n   */\n\n  type: function (name, msg) {\n    this._type = name;\n    return this.use(type(name), msg);\n  },\n\n  /**\n   * Matches given `regexp`\n   *\n   * @param {RegExp} regexp\n   * @param {String} [msg]\n   * @return {Property}\n   * @api public\n   */\n\n  match: function (regexp, msg) {\n    return this.use(match(regexp), msg);\n  },\n\n  /**\n   * Validate each value in array against given function `fn`\n   *\n   * @param {Function} fn\n   * @param {String} [msg]\n   * @return {Property}\n   * @api public\n   */\n\n  each: function (fn, msg) {\n    return this.use(each(fn), msg);\n  },\n\n  /**\n   * Get schema path\n   *\n   * @param {String} path\n   * @param {Object} [rules]\n   * @return {Path}\n   * @api public\n   */\n\n  path: function (path, rules) {\n    return this.schema(path, rules);\n  },\n\n  /**\n   * Set default error message\n   *\n   * @param {String} msg\n   * @return {Property}\n   * @api public\n   */\n\n  message: function (msg) {\n    return this.msg = msg;\n  },\n\n  /**\n   * Typecast given value\n   *\n   * @param {Mixed} val\n   * @return {Mixed}\n   * @api public\n   */\n\n  typecast: function (val) {\n    return typecast(val, this._type);\n  },\n\n  /**\n   * Validate given `value`\n   *\n   * @param {Mixed} value\n   * @param {Object} [ctx]\n   * @return {String|Boolean}\n   * @api public\n   */\n\n  validate: function (value, ctx) {\n    var fns = this.fns;\n\n    for (var i = 0; i < fns.length; i++) {\n      var fn = fns[i];\n      var valid = fn[0].call(ctx, value);\n      if (!valid) return error(this, fn[1]);\n    }\n\n    return false;\n  }\n};\n\n/**\n * Validate presence\n *\n * @return {Function}\n * @api private\n */\n\nfunction required (bool) {\n  return function (value) {\n    return bool === false || !!value;\n  }\n}\n\n/**\n * Validate type\n *\n * @param {String} name\n * @return {Function}\n * @api private\n */\n\nfunction type (name) {\n  return function (value) {\n    return value == null || typeOf(value) == name;\n  }\n}\n\n/**\n * Validate values\n *\n * @param {String} name\n * @return {Function}\n * @api private\n */\n\nfunction each (fn) {\n  return function (arr) {\n    if (arr == null) return true;\n    if (!Array.isArray(arr)) return false;\n\n    for (var i = 0; i < arr.length; i++) {\n      if (!fn(arr[i])) return false;\n    }\n\n    return true;\n  }\n}\n\n/**\n * Match given `regexp`\n *\n * @param {RegExp} regexp\n * @return {Function}\n * @api private\n */\n\nfunction match (regexp) {\n  return function (value) {\n    return value == null || regexp.test(value);\n  }\n}\n\n/**\n * Create an error\n *\n * @param {Property} prop\n * @param {String} msg\n * @return {Error}\n * @api private\n */\n\n\nfunction error (prop, msg) {\n  var err = new Error(msg ||Â prop.msg);\n  err.path = prop.name;\n  return err;\n}\n"},"hash":"e8dd68bcb399ba6c685989457166b938"}