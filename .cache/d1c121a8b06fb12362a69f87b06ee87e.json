{"dependencies":[],"generated":{"js":"module.exports = typecast;\n\n/**\n * Cast given `val` to `type`\n *\n * @param {Mixed} val\n * @param {String} type\n * @api public\n */\n\nfunction typecast (val, type) {\n  var fn = typecast[type];\n  if (typeof fn != 'function') throw new Error('cannot cast to ' + type);\n  return fn(val);\n}\n\n/**\n * Cast `val` to `String`\n *\n * @param {Mixed} val\n * @api public\n */\n\ntypecast.string = function (val) {\n  return val.toString();\n};\n\n/**\n * Cast `val` to `Number`\n *\n * @param {Mixed} val\n * @api public\n */\n\ntypecast.number = function (val) {\n  var num = parseFloat(val);\n  return isNaN(num)\n    ? null\n    : num;\n};\n\n/**\n * Cast `val` to a`Date`\n *\n * @param {Mixed} val\n * @api public\n */\n\ntypecast.date = function (val) {\n  var date = new Date(val);\n  return isNaN(date.valueOf())\n    ? null\n    : date;\n};\n\n/**\n * Cast `val` to `Array`\n *\n * @param {Mixed} val\n * @api public\n */\n\ntypecast.array = function (val) {\n  if (val instanceof Array) return val;\n  var arr = val.toString().split(',');\n  for (var i = 0; i < arr.length; i++) {\n    arr[i] = arr[i].trim();\n  }\n  return arr;\n};\n\n/**\n * Cast `val` to `Boolean`\n *\n * @param {Mixed} val\n * @api public\n */\n\ntypecast.boolean = function (val) {\n  return !! val && val !== 'false';\n};"},"hash":"6ce565c23946f7dbbae33a5c345b8e74"}